% CIM --- Information graph to construct the credentials from
pred CIM(e) <->
    Entity(e);
    Prop(e).
class Entity {
    contains Prop[] outgoing opposite source
    Prop[] incoming opposite target
	contains CredentialEntity[1..10] trace opposite from
}

class Prop {
	container Entity source opposite outgoing
    Entity[1] target opposite incoming
    CredentialProp[1] trace opposite _
}

pred neighbours(Entity s, Entity t) <->
    Prop(e),
    Prop::source(e, s),
    Prop::target(e, t);
    Prop::source(e, t),
    Prop::target(e, s).

pred selfLoopProp(Prop e) <-> Prop::source(e, s), Prop::target(e, s).

error contains_loop_relationship(Prop e) <-> selfLoopProp(e).

error non_connected(Entity n, Entity m) <-> n != m, !neighbours+(n, m).

%% PIM ------ Credential claim model
pred PIM(e) <->
    CredentialEntity(e);
    CredentialProp(e);
    Credential(e).
class CredentialEntity {
	Entity from opposite trace
    contains CredentialProp[0..10] outgoing opposite source
    CredentialProp[0..10] incoming opposite target
    contains Credential _ opposite credentialSubject
}
class CredentialProp {
	container CredentialEntity source opposite outgoing
    CredentialEntity[1] target opposite incoming
    Prop[1] _ opposite trace
}
class Credential {
	container CredentialEntity credentialSubject opposite _
}

pred cred_neigbors(CredentialEntity s, CredentialEntity t) <->
    CredentialProp(e),
    CredentialProp::source(e, s),
    CredentialProp::target(e, t);
    CredentialProp::source(e, t),
    CredentialProp::target(e, s).
error prop_and_cred_prop_have_have_same_source(CredentialProp cred_prop) <->
    Prop::trace(prop,cred_prop),
    Prop::source(prop,entity),
    CredentialProp::source(cred_prop,cred_entity),
    !Entity::trace(entity,cred_entity).
error prop_and_cred_prop_have_dont_have_same_target(CredentialProp cred_prop) <->
    Prop::trace(prop,cred_prop),
    Prop::target(prop,entity),
    CredentialProp::target(cred_prop,cred_entity),
    !Entity::trace(entity,cred_entity).
error no_cred_props_for_cred_entity(CredentialEntity ent) <->
    !CredentialProp::target(_,ent),
    !CredentialProp::source(_,ent).
pred aligned_entites(CredentialEntity e1, CredentialEntity e2) <->
    e1 != e2,
    CredentialEntity::from(e1,e),
    CredentialEntity::from(e2,e).
pred aligned_entity(CredentialEntity e) <->
    aligned_entites(e,_).
error creds_point_to_same_claim_set(Credential cred1, Credential cred2) <->
    cred1 != cred2,
    Credential::credentialSubject(cred1,subj1),
    Credential::credentialSubject(cred2,subj2),
    cred_neigbors+(subj1,subj2).

error cred_points_to_non_aligned_entity(Credential cred) <->
    Credential::credentialSubject(cred,subj),
    !aligned_entity(subj).


% TODO: In the same credential, an entity cannot have two credential entities
Entity(Tom).
Entity(Blue_eyes).
Entity(Man).
% Entity(Janitor).
Prop(has).
Prop::source(has,Tom).
Prop::target(has,Blue_eyes).
Prop(is_a).
Prop::source(is_a,Tom).
Prop::target(is_a,Man).
% Prop(has_job).
% Prop::source(has_job,Tom).
% Prop::target(has_job,Janitor).

scope node = 5..20
      , Prop = 2
      , Entity = 3
      , Credential = 2
      % , CredentialEntity = 4
      .