% CIM --- Information graph to construct the credentials from
shadow pred CIM(e) <->
    Entity(e);
    Prop(e).
class Entity {
    contains Prop[] property
	contains CredentialEntity[1..4] trace
}

class Prop {
    Entity[1] value
    contains CredentialProp[1] trace
}

pred statement(Entity subject, Prop property, Entity value) <->
    subject != value,
    property(subject,property),
    value(property,value).

propagation rule statement_rule(Entity subject, Prop property, Entity value) <->
    must statement(subject,property,value)
==>
    property(subject,property),
    value(property,value).

propagation rule no_self_loop(Prop p, Entity e)  <->
    must property(e, p) ==> !value(p,e).

pred neighbours(Entity s, Entity t) <->
    statement(s,_,t);statement(t,_,s).

error non_connected(Entity n, Entity m) <-> n != m, !neighbours+(n, m).

% PIM ------ Credential claim model
shadow pred PIM(e) <->
    CredentialEntity(e);
    CredentialProp(e);
    Credential(e).
class CredentialEntity {
    contains Credential _ opposite credentialSubject
}
class CredentialProp {
    CredentialEntity[1] source
    CredentialEntity[1] target
}

pred credential_statement(CredentialEntity source, CredentialProp prop, CredentialEntity target) <->
    source != target,
    CredentialProp::source(prop,source),
    CredentialProp::target(prop,target).

propagation rule credential_statement_rule(CredentialEntity source, CredentialProp prop, CredentialEntity target) <->
    must credential_statement(source,prop,target)
==>
    CredentialProp::source(prop,source),
    CredentialProp::target(prop,target).

pred cred_neigbors(CredentialEntity s, CredentialEntity t) <->
    credential_statement(s,_,t); credential_statement(t,_,s).

propagation rule pim_and_cim_should_align(Entity subject, Prop property, Entity value) <->
    may statement(subject, property, value),
    must credential_statement(source,prop,target),
    must Entity::trace(subject,source),
    must Prop::trace(property,prop),
    must Entity::trace(value,target)
==>
    statement(subject, property, value).

propagation rule tracing_cim_to_pim_when_cred_statement_is_available(
    Entity subject, Prop property, Entity value,
    CredentialEntity source, CredentialProp prop, CredentialEntity target
) <->
    must credential_statement(source,prop,target),
    must statement(subject, property, value),
    must Prop::trace(property,prop),
    may Entity::trace(subject,source),
    may Entity::trace(value,target)
==>
    Entity::trace(subject,source),
    Prop::trace(property,prop),
    Entity::trace(value,target).

propagation rule pim_and_cim_should_align_neg(CredentialEntity source, CredentialProp prop, CredentialEntity target) <->
    may credential_statement(source, prop, target),
    must !statement(subject, property, value),
    must Entity::trace(subject,source),
    must Prop::trace(property,prop),
    must Entity::trace(value,target)
==>
    !credential_statement(source, prop, target).


error number_of_CredentialEntity(CredentialEntity c_e1,CredentialEntity c_e2) <->
    Entity::trace(e,c_e1),
    Entity::trace(e,c_e2),
    c_e1 != c_e2,
    CredentialProp::target(c_p1,c_e1),
    CredentialProp::target(c_p2,c_e2),
    c_p1 != c_p2.
propagation rule prop_source(CredentialProp cred_prop,CredentialEntity cred_entity) <->
    must Prop::trace(prop,cred_prop),
    must Entity::trace(entity,cred_entity),
    must property(prop_entity, prop),
    prop_entity != entity
==>
    !CredentialProp::source(cred_prop,cred_entity).
propagation rule prop_target(CredentialProp cred_prop,CredentialEntity cred_entity) <->
    must Prop::trace(prop,cred_prop),
    must Entity::trace(entity,cred_entity),
    must value(prop,prop_entity),
    prop_entity != entity
==>
    !CredentialProp::target(cred_prop,cred_entity).
error no_cred_props_for_cred_entity(CredentialEntity ent) <->
    !CredentialProp::target(_,ent),
    !CredentialProp::source(_,ent).


    

shadow pred aligned_entites(CredentialEntity e1, CredentialEntity e2) <->
    e1 != e2,
    Entity::trace(e,e1),
    Entity::trace(e,e2).



class Credential {
	container CredentialEntity credentialSubject opposite _
    contains Formatted_Credential[1..*] trace 
}

pred Root_cred_entity(CredentialEntity e) <->
    !credential_statement(_,_,e).

propagation rule targets_are_not_roots(CredentialEntity e) <->
    must target(_,e)
==>
    !Root_cred_entity(e).

propagation rule cred_points_to_root_cred_e(CredentialEntity e, Credential c) <->
    must !Root_cred_entity(e)
==>
    !credentialSubject(c,e).

error root_ent_doesnt_have_cred(Root_cred_entity e) <->
    !credentialSubject(_,e).

pred common_parent(Prop p1, Prop p2) <->
    p1 != p2,
    Prop::trace(p1,cp1),
    Prop::trace(p2,cp2),
    CredentialProp::source(cp1,e1),
    CredentialProp::source(cp2,e2),
    e1 == e2
.

% PSM --- Carrying format specific 
shadow pred PSM(e) <->
    Formatted_Credential(e).

class Formatted_Credential {
    
}

statement(Tom,owns_plot,plot_num_387).
statement(Tom,id_number,id_num_142536EE).

% statement(accountant,perk,vacation).
% statement(accountant,salary,salary_amount).
% statement(Car,color,blue).
% statement(Car,price,price_amount).
!exists(Prop::new).
!exists(Entity::new).

Prop::trace(owns_plot,a_owns_plot).
Prop::trace(id_number,a_id_number).


% Prop::trace(job,job1).
% Prop::trace(perk,perk1).
% Prop::trace(salary,salary1).
% Prop::trace(color,color1).


credential_statement(a_Tom1,a_owns_plot,a_plot_num_387).
source(a_id_number,a_Tom2).
% credential_statement(a_Tom2,a_id_number,a_id_num_142536EE).

% credentialSubject(property_sheet,a_Tom1).
% credentialSubject(id_card,a_Tom2).

Credential::trace(property_sheet, anoncreds_property_sheet).
% Credential::trace(property_sheet, json_ld_property_sheet).
!common_parent(owns_plot,id_number).
% Credential::trace(id_card, anoncreds_id_card).
% Credential::trace(id_card, json_ld_id_card).
% !exists(Formatted_Credential::new).
% credential_statement(accountant2,perk1,vacation1).
% credential_statement(accountant3,salary1,salary_amount1).
% credential_statement(Car2,color1,blue1).
% !exists(CredentialEntity::new).
% !exists(CredentialProp::new).
% !exists(Credential::new).
scope node = 1..20
      % , Prop = 4
      % , Entity = 5
      % , CredentialEntity = 6
      , Credential = 1..2
      
      .